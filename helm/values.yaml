global:
  cloudProvider: {}
  tracing: {}
  metrics: {}
  environment: {}

rasterCommon:
  serviceUrls: 
    jobManager: http://localhost:8082
    heartbeatManager: http://localhost:8085
    discreteOverseer: http://localhost:8080
  
  storage:
    tilesStorageProvider: 'FS'
    fs:
      ingestionSourcePvc:
        name: ingestion-source-pvc
        subPath: ingestion-source
      internalPvc:
        name: "internal-pvc"
        tilesSubPath: tiles
    s3:
      endpointUrl: "http://localhost:9000"
      tilesBucket: "mapping-images"
      forcePathStyle: true
      sslEnabled: false
      virtualHosting: false
      secretName: raster-tiles-s3-secret
  jobManagement:
    ingestion:
      new: 
        jobType: Ingestion_New
        splitTilesTaskType: tilesSplitting

enabled: true
environment: "development"
replicaCount: 1
initialDelaySeconds: 60
nodePort: 30032 #for minikube deployment only
resetOnConfigChange: true

cloudProvider:
  dockerRegistryUrl: my-registry-url.io
  imagePullSecretName: 'my-registry-secret'
  flavor: openshift

caSecretName: ''
caKey: 'ca.crt'

image:
  repository: "tiles-splitter"
  tag: "latest"

storage:
  ingestionSourcePvc:
    enabled: true
  internalPvc:
    create: false #for local deployment only
  internalPv:
    name: local-tiles-pv
    directory: '/tiles' #tiles hostPatch


S3:
  secret:
    createSecret: false # secret should be created on higher level for deployments with multiple services
    accessKeyId: # used only when creating secret
    secretAccessKey: # used only when creating secret


env:
  port: 8080
  targetPort: 8080
  protocol: TCP
  logLevel: info
  logPrettyPrintEnabled: false
  responseCompressionEnabled: true
  requestPayloadLimit: 1mb
  tracing:
    enabled: false
    url: "http://localhost:55681/v1/trace"
  metrics:
    enabled: false
    url: "http://localhost:55681/v1/metrics"
  splitAttempts: 3
  vrt:
    nodata: "0"
    outputSRS: "EPSG:4326"
    resampling: "bilinear"
    addAlpha: true
    useBandCount: true
    inputBandCount: 3
  generateTiles:
    resampling: "average"
    profile: "geodetic"
    srcnodata: "0"
    verbose: true
  queue:
    dequeueIntervalMs: 1000
    heartbeatIntervalMs: 300
  
resources:
  enabled: true
  value:
    limits:
      cpu: "100m"
      memory: "128Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"

