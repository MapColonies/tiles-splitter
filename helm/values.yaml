global:
  cloudProvider: {}
  tracing: {}
  metrics: {}
  environment: {}
  useNodeAffinity: false
  serviceUrls: 
    jobManager: ""
    heartbeatManager: ""
    discreteOverseer: ""
  storage:
    tilesStorageProvider: ""
    fs:
      ingestionSourcePvc:
        name: ""
        subPath: ""
      internalPvc:
        name: ""
        tilesSubPath: ""
    s3:
      endpointUrl: ""
      tilesBucket: ""
      forcePathStyle: false
      sslEnabled: false
      virtualHosting: false
      secretName: ""
  jobManagement:
    ingestion:
      new: 
        jobType: ""
        splitTilesTaskType: ""

serviceUrls: 
  jobManager: ""
  heartbeatManager: ""
  discreteOverseer: ""

storage:
  tilesStorageProvider: ''
  fs:
    ingestionSourcePvc:
      name: ""
      subPath: ""
    internalPvc:
      name: ""
      tilesSubPath: ""
  s3:
    endpointUrl: ""
    tilesBucket: ""
    forcePathStyle: false
    sslEnabled: false
    virtualHosting: false
    secretName: ""
jobManagement:
  ingestion:
    new: 
      jobType: ""
      splitTilesTaskType: ""

enabled: true
environment: "development"
replicaCount: 1
initialDelaySeconds: 60
nodePort: 30032 #for minikube deployment only
resetOnConfigChange: true
imagePullPolicy: Always

cloudProvider:
  dockerRegistryUrl: my-registry-url.io
  imagePullSecretName: 'my-registry-secret'
  flavor: openshift

image:
  repository: "tiles-splitter"
  tag: "latest"

# add pod annotations
# example:
# podAnnotations:
  # annotation1: annotation-value-1
  # annotation2: annotation-value-2
podAnnotations: {}

env:
  port: 8080
  targetPort: 8080
  protocol: TCP
  logLevel: info
  logPrettyPrintEnabled: false
  responseCompressionEnabled: true
  requestPayloadLimit: 1mb
  tracing:
    enabled: false
    url: "http://localhost:55681/v1/trace"
  metrics:
    enabled: false
    url: "http://localhost:55681/v1/metrics"
  splitAttempts: 3
  vrt:
    nodata: "0"
    outputSRS: "EPSG:4326"
    resampling: "bilinear"
    addAlpha: true
    useBandCount: true
    inputBandCount: 3
  generateTiles:
    resampling: "average"
    profile: "geodetic"
    srcnodata: "0"
    verbose: true
  queue:
    dequeueIntervalMs: 1000
    heartbeatIntervalMs: 300
  
resources:
  enabled: true
  value:
    limits:
      cpu: "100m"
      memory: "128Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"

S3:
  secret:
    createSecret: false # secret should be created on higher level for deployments with multiple services
    accessKeyId: # used only when creating secret
    secretAccessKey: # used only when creating secret
